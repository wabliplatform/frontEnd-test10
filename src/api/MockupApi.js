/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Mockup from '../model/Mockup';

/**
* Mockup service.
* @module api/MockupApi
* @version 1.0.0
*/
export default class MockupApi {

    /**
    * Constructs a new MockupApi. 
    * @alias module:api/MockupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createmockup operation.
     * @callback module:api/MockupApi~createmockupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mockup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Mockup} mockup data to be created
     * @param {module:api/MockupApi~createmockupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mockup}
     */
    createmockup(mockup, callback) {
      let postBody = mockup;
      // verify the required parameter 'mockup' is set
      if (mockup === undefined || mockup === null) {
        throw new Error("Missing the required parameter 'mockup' when calling createmockup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Mockup;
      return this.apiClient.callApi(
        '/mockup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletemockup operation.
     * @callback module:api/MockupApi~deletemockupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} mockupId the Id parameter
     * @param {module:api/MockupApi~deletemockupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletemockup(mockupId, callback) {
      let postBody = null;
      // verify the required parameter 'mockupId' is set
      if (mockupId === undefined || mockupId === null) {
        throw new Error("Missing the required parameter 'mockupId' when calling deletemockup");
      }

      let pathParams = {
        'mockupId': mockupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mockup/{mockupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllmockup operation.
     * @callback module:api/MockupApi~getAllmockupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mockup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/MockupApi~getAllmockupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mockup>}
     */
    getAllmockup(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Mockup];
      return this.apiClient.callApi(
        '/mockup/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getmockup operation.
     * @callback module:api/MockupApi~getmockupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mockup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} mockupId the Id parameter
     * @param {module:api/MockupApi~getmockupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mockup}
     */
    getmockup(mockupId, callback) {
      let postBody = null;
      // verify the required parameter 'mockupId' is set
      if (mockupId === undefined || mockupId === null) {
        throw new Error("Missing the required parameter 'mockupId' when calling getmockup");
      }

      let pathParams = {
        'mockupId': mockupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mockup;
      return this.apiClient.callApi(
        '/mockup/{mockupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatemockup operation.
     * @callback module:api/MockupApi~updatemockupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mockup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} mockupId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Mockup} opts.mockup data to be updated
     * @param {module:api/MockupApi~updatemockupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mockup}
     */
    updatemockup(mockupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['mockup'];
      // verify the required parameter 'mockupId' is set
      if (mockupId === undefined || mockupId === null) {
        throw new Error("Missing the required parameter 'mockupId' when calling updatemockup");
      }

      let pathParams = {
        'mockupId': mockupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Mockup;
      return this.apiClient.callApi(
        '/mockup/{mockupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
